<?php
 
function oe_stripe_process_payment() {
	if(isset($_POST['action']) && $_POST['action'] == 'stripe' && wp_verify_nonce($_POST['stripe_nonce'], 'stripe-nonce')) {
 
		global $stripe_options;
 
		// load the stripe libraries
		require_once(STRIPE_BASE_DIR . '/lib/Stripe.php');
 
		$amount = $_POST['amount'] * 100;
 
		// retrieve the token generated by stripe.js
		$token = $_POST['stripeToken'];
 
		// check if we are using test mode
		if(isset($stripe_options['test_mode']) && $stripe_options['test_mode']) {
			$secret_key = $stripe_options['test_secret_key'];
		} else {
			$secret_key = $stripe_options['live_secret_key'];
		}
 
		Stripe::setApiKey($secret_key);
 
		if(isset($_POST['recurring']) && $_POST['recurring'] == 'yes') { // process a recurring payment
 
			$plan_id = strip_tags(trim($_POST['plan_id']));		
 
			try {		
 
				if( is_user_logged_in() )
					$customer_id = get_user_meta( get_current_user_id(), 'stripe_customer_id', true );
				else
					$customer_id = false;
 
				if( $customer_id ) {
 
					// retrieve our customer from Stripe
					$cu = Stripe_Customer::retrieve( $customer_id );
 
					// update the customer's card info (in case it has changed )
					$cu->card = $token;
 
					// update a customer's subscription
					$cu->updateSubscription(array(
							'plan' => $plan_id
						)
					);
 
					// save everything
					$cu->save();
 
				} else {
 
					// create a brand new customer
					$customer = Stripe_Customer::create(array(
							'card' => $token,
							'plan' => $plan_id,
							'email' => strip_tags(trim($_POST['email']))
						)
					);
 
					if( is_user_logged_in () ) {
						// store the new customer ID in the meta table
						update_user_meta( get_current_user_id(), '_stripe_customer_id', $customer->id );
					}
				}
 
				// redirect on successful recurring payment setup
				$redirect = add_query_arg('payment', 'paid', $_POST['redirect']);
 
			} catch (Exception $e) {
				// redirect on failure
				$redirect = add_query_arg('payment', 'failed', $_POST['redirect']);
			}
 
		} else { // process a one-time payment
 
			// attempt to charge the customer's card
			try {	
 
				if( is_user_logged_in() )
					$customer_id = get_user_meta( get_current_user_id(), '_stripe_customer_id', true );
				else
					$customer_id = false;
 
				if( !$customer_id ) {
 
					// create a new customer if our current user doesn't have one
					$customer = Stripe_Customer::create(array(
							'card' => $token,
							'email' => strip_tags(trim($_POST['email']))
						)
					);
 
					$customer_id = $customer->id;
 
					if( is_user_logged_in () ) {
						update_user_meta( get_current_user_id(), '_stripe_customer_id', $customer_id );
					}
				}
				if( $customer_id ) {
 
					$charge = Stripe_Charge::create(array(
							'amount' => $amount, // amount in cents
							'currency' => 'usd',
							'customer' => $customer_id
						)
					);
 
				} else {
					// the customer wasn't found or created, throw an error
					throw new Exception( __( 'A customer could not be created, or no customer was found.', 'pippin' ) );
				}
 
				// redirect on successful payment
				$redirect = add_query_arg('payment', 'paid', $_POST['redirect']);
 
			} catch (Exception $e) {
				wp_die($e);
				// redirect on failed payment
				$redirect = add_query_arg('payment', 'failed', $_POST['redirect']);
			}
		}
 
		// redirect back to our previous page with the added query variable
		wp_redirect($redirect); exit;
	}
}
add_action('init', 'oe_stripe_process_payment');